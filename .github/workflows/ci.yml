name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  backend-test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Lint backend code
        working-directory: ./backend
        run: |
          pip install ruff black
          ruff check app/ --fix
          black --check app/

      - name: Run backend tests
        working-directory: ./backend
        run: |
          pytest tests/ -v --tb=short
        env:
          REDIS_URL: redis://localhost:6379/0
          FAISS_INDEX_PATH: /tmp/test_index.faiss
          ITEM_IDS_PATH: /tmp/test_item_ids.npy
          USER_EMB_PATH: /tmp/test_user_emb.npy
          ITEM_EMB_PATH: /tmp/test_item_emb.npy

  ml-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-ml-${{ hashFiles('ml/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-ml-

      - name: Install ML dependencies
        working-directory: ./ml
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint ML code
        working-directory: ./ml
        run: |
          pip install ruff black
          ruff check models/ --fix
          black --check models/

      - name: Test ML pipeline
        working-directory: ./ml
        run: |
          # Create sample data for testing
          python -m data.scripts.lastfm_download
          # Test model creation (without full training)
          python -c "
          from models.lightgcn import LightGCN
          import torch
          model = LightGCN(num_users=100, num_items=1000, embedding_dim=64)
          print('Model created successfully')
          "

  frontend-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Lint frontend code
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          VITE_API_URL: http://localhost:8000

      - name: Test frontend build
        working-directory: ./frontend
        run: |
          # Check if build artifacts exist
          test -d dist
          test -f dist/index.html

  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test, ml-test, frontend-test]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          # Backend
          cd backend && pip install -r requirements.txt
          # Frontend
          cd ../frontend && npm ci

      - name: Create test models directory
        run: |
          mkdir -p models
          # Create dummy model files for testing
          python -c "
          import numpy as np
          np.save('models/user_emb.npy', np.random.rand(100, 64).astype(np.float32))
          np.save('models/item_emb.npy', np.random.rand(1000, 64).astype(np.float32))
          np.save('models/item_ids.npy', np.arange(1000))
          "

      - name: Start services
        run: |
          # Start Redis
          docker run -d --name redis -p 6379:6379 redis:7-alpine
          # Start backend
          cd backend && python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          # Wait for backend to start
          sleep 10
          # Start frontend
          cd ../frontend && npm run preview -- --host 0.0.0.0 --port 5173 &
          # Wait for frontend to start
          sleep 5

      - name: Test API endpoints
        run: |
          # Test health endpoint
          curl -f http://localhost:8000/healthz
          # Test metrics endpoint
          curl -f http://localhost:8000/metrics
          # Test recommendations endpoint (should return 503 if models not loaded)
          curl -f http://localhost:8000/rec/users/1 || echo "Expected 503 for missing models"

      - name: Test frontend
        run: |
          # Test if frontend is accessible
          curl -f http://localhost:5173

      - name: Cleanup
        if: always()
        run: |
          docker stop redis || true
          docker rm redis || true
